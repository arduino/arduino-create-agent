version: '3'

tasks:
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:cache-dep-licenses:
    desc: Cache dependency license metadata
    cmds:
      - |
        if ! which licensed &>/dev/null; then
          if [[ {{OS}} == "windows" ]]; then
            echo "Licensed does not have Windows support."
            echo "Please use Linux/macOS or download the dependencies cache from the GitHub Actions workflow artifact."
          else
            echo "licensed not found or not in PATH. Please install: https://github.com/github/licensed#as-an-executable"
          fi
          exit 1
        fi
      - licensed cache

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:check-dep-licenses:
    desc: Check for unapproved dependency licenses
    deps:
      - task: general:cache-dep-licenses
    cmds:
      - licensed status

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/go-task/Taskfile.yml
  go:build:
    desc: Build the project, to use a specific version use `task build TAG_VERSION=x.x.x`
    dir: "{{.DEFAULT_GO_MODULE_PATH}}"
    cmds:
      - go build -v -i {{default "" .ADDITIONAL_FLAGS}} -o {{default "arduino-create-agent" .APP_NAME}} -ldflags '-X main.version={{default .TAG_TEST .TAG_VERSION}} -X main.git_revision={{.COMMIT}} {{default "" .WIN_FLAGS}}'
    vars:
      COMMIT:
        sh: git log -n 1 --format=%h

  go:build-cli:
    desc: Build the project without tray icon support
    cmds:
      - task: go:build
        vars:
          APP_NAME: arduino-create-agent_cli
          ADDITIONAL_FLAGS: -tags cli

  go:build-win:
    desc: Build the project for win, to build 32bit `export GOARCH=386` and for 64 bit `export GOARCH=amd64` before `task build-win`
    cmds:
      - rsrc -arch {{.GOARCH}} -manifest manifest.xml # GOARCH shoud be either amd64 or 386
      - task: go:build
        vars:
          APP_NAME: arduino-create-agent.exe
          WIN_FLAGS: -H=windowsgui
      - rm *.syso # rm file to avoid compilation problems on other platforms

  go:build-win-cli:
    desc: Build the project fow win without tray icon support
    cmds:
      - task: go:build
        vars:
          APP_NAME: arduino-create-agent_cli.exe
          ADDITIONAL_FLAGS: -tags cli

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/test-go-task/Taskfile.yml
  go:test:
    desc: Run unit tests
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        go test \
          -v \
          -short \
          -run '{{default ".*" .GO_TEST_REGEX}}' \
          {{default "-timeout 10m -coverpkg=./... -covermode=atomic" .GO_TEST_FLAGS}} \
          -coverprofile=coverage_unit.txt \
          {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/test-go-integration-task/Taskfile.yml
  go:test-integration:
    desc: Run integration tests
    deps:
      # - task: go:build # we build it in the CI and not in the task because _cli version is required and build procedure is different on win
      - task: poetry:install-deps
    cmds:
      - poetry run pytest tests

   # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:update-deps:
    desc: Update all dependencies managed by Poetry to their newest versions
    cmds:
      - poetry update

  check:
    desc: Check fmt and lint
    cmds:
      - go version
      - go fmt {{ default .DEFAULT_TARGETS .TARGETS }}
      - test -z $(go fmt {{ default .DEFAULT_TARGETS .TARGETS }})
      - echo 'test ok'
      - go vet {{ default .DEFAULT_TARGETS .TARGETS }}
      - echo 'vet ok'
      # FIXME: too many suggestions are failing the check, I'll fix these one in
      # another PR.
      # - "'{{.GOLINTBIN}}' {{.GOLINTFLAGS}} {{ default .DEFAULT_TARGETS .TARGETS }}"
      # - task: i18n:check
      # - task: python:check
      # - task: docs:check
      # - task: config:check
      
vars:
  TAG_TEST: "0.0.0-dev"
  GOARCH:
    sh: go env GOARCH
  # all modules of this project except for "gen/..." module
  DEFAULT_TARGETS:
    sh: echo `go list ./... | grep -v 'arduino-create-agent/gen/' | tr '\n' ' '`
  DEFAULT_GO_MODULE_PATH: ./
  DEFAULT_GO_PACKAGES:
    sh: |
      echo $(cd {{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}} && go list ./... | tr '\n' ' ' || echo '"ERROR: Unable to discover Go packages"')
  # check-lint vars
  GOLINTBIN:
    sh: go list -f {{"{{"}}".Target{{"}}"}}" golang.org/x/lint/golint
  GOLINTFLAGS: "-min_confidence 0.8 -set_exit_status"
