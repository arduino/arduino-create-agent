name: release

on:
  push:
    branches:
      - umbynos/*

jobs:

  build:
    strategy:
      matrix:
        # operating-system: [ubuntu-latest, windows-latest, macOS-latest]
        operating-system: [ubuntu-latest]

    runs-on: ${{ matrix.operating-system }}

    steps:
      - name: Disable EOL conversions
        run: git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"

      - name: Install Dependencies (Linux)
        # run: sudo apt-get install ninja-build
        run: sudo apt update && sudo apt install -y --no-install-recommends build-essential libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev
        if: matrix.operating-system == 'ubuntu-latest'

      - name: Install Go deps
        # Since 10/23/2019 pwsh is the default shell
        # on Windows, but pwsh fails to install protoc-gen-go so
        # we force bash as default shell for all OSes in this task
        run: |
          go get github.com/golangci/govet
          go get golang.org/x/lint/golint
        shell: bash

      - name: Install Taskfile
        uses: arduino/actions/setup-taskfile@master
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check the code is good
        run: task check

      - name: Run unit tests
        run: task test-unit

      - name: Build the Agent
        run: task build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: arduino-create-agent-${{ matrix.operating-system }}
          path: arduino-create-agent
          if-no-files-found: error

  package:
    needs: build
    runs-on: ubuntu-latest

    env:
      INSTALLER_VARS: "project.outputDirectory=$PWD project.version=${GITHUB_SHA} workspace=$PWD realname=Arduino_Create_Bridge"
      CERT_INSTALL: "ask_certificates_install=CI"  # win(edge),mac(safari)
      NO_CERT_INSTALL: "ask_certificates_install=CS"  # linux
      CHOICE_CERT_INSTALL: "ask_certificates_install=CC"  # win,mac:(ff,chrome)

    container:
      image: floydpink/ubuntu-install-builder:latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'bcmi-labs/arduino-create-agent-installer'
          token: ${{ secrets.PAT_TEMP }}

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: arduino-create-agent-ubuntu-latest
          path: artifacts/linux-386/

      - name: Make executable
        run: chmod +x artifacts/linux-386/arduino-create-agent

      - name: Rename executable to Arduino_Create_Bridge
        run: mv artifacts/linux-386/arduino-create-agent artifacts/linux-386/Arduino_Create_Bridge

      - name: Save license to file
        run: echo "${{ secrets.INSTALLER_LICENSE }}" > /tmp/license.xml

      - name: Launch Bitrock installbuilder-20
        run: /opt/installbuilder-20.3.0/bin/builder build installer.xml linux --verbose --license /tmp/license.xml  --setvars ${{ env.INSTALLER_VARS }} ${{ env.NO_CERT_INSTALL }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ArduinoCreateAgent
          path: ArduinoCreateAgent*
          if-no-files-found: error

      # - name: Send unit tests coverage to Codecov
      #   if: >
      #     matrix.operating-system == 'ubuntu-latest' &&
      #     github.event_name == 'push'
      #   uses: codecov/codecov-action@v1
      #   with:
      #     file: ./coverage_unit.txt
      #     flags: unit

      # - name: Send legacy tests coverage to Codecov
      #   if: >
      #     matrix.operating-system == 'ubuntu-latest' &&
      #     github.event_name == 'push'
      #   uses: codecov/codecov-action@v1
      #   with:
      #     file: ./coverage_legacy.txt
      #     flags: unit

      # - name: Send integration tests coverage to Codecov
      #   if: >
      #     matrix.operating-system == 'ubuntu-latest' &&
      #     github.event_name == 'push'
      #   uses: codecov/codecov-action@v1
      #   with:
      #     file: ./coverage_integ.txt
      #     flags: integ

  # package-macOS:
  #   needs: build
  #   strategy:
  #     matrix:
  #       # operating-system: [windows-latest, macOS-latest]
  #       operating-system: [macOS-latest]

  #   runs-on: ${{ matrix.operating-system }}

  #   steps:
  #     # - name: Disable EOL conversions
  #     #   run: git config --global core.autocrlf false

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: arduino-create-agent-${{ matrix.operating-system }}
  #         path: arduino-create-agent

  #     - name: Build .app
  #       run: |
  #         mkdir build
  #         cp -r skel/ build
  #         cp arduino-create-agent/arduino-create-agent build/ArduinoCreateAgent.app/Contents/MacOS/Arduino_Create_Bridge
  #         cp config.ini build/ArduinoCreateAgent.app/Contents/MacOS/

  #         find build
  #       shell: bash      

      # - name: Download Gon
      #   run: |
      #     wget -q https://github.com/mitchellh/gon/releases/download/v0.2.2/gon_0.2.2_macos.zip
      #     unzip gon_0.2.2_macos.zip -d /usr/local/bin
      #     rm -f gon_0.2.2_macos.zip
