// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// indexes endpoints
//
// Command:
// $ goa gen github.com/arduino/arduino-create-agent/design

package indexes

import (
	"context"

	goa "goa.design/goa"
)

// Endpoints wraps the "indexes" service endpoints.
type Endpoints struct {
	List   goa.Endpoint
	Add    goa.Endpoint
	Remove goa.Endpoint
}

// NewEndpoints wraps the methods of the "indexes" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:   NewListEndpoint(s),
		Add:    NewAddEndpoint(s),
		Remove: NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "indexes" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Add = m(e.Add)
	e.Remove = m(e.Remove)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "indexes".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx)
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "indexes".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexPayload)
		res, err := s.Add(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedOperation(res, "default")
		return vres, nil
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "indexes".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexPayload)
		res, err := s.Remove(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedOperation(res, "default")
		return vres, nil
	}
}
